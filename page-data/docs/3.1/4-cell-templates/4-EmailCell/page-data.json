{"componentChunkName":"component---src-templates-docs-post-tsx","path":"/docs/3.1/4-cell-templates/4-EmailCell/","result":{"data":{"site":{"siteMetadata":{"title":"ReactGrid","description":"Spreadsheet experience for your React app","siteUrl":"https://reactgrid.com","pages":[{"description":"","id":"home","route":"/","title":"Home","active":false},{"description":"","id":"features","route":"/features","title":"Features","active":true},{"description":"","id":"examples","route":"/examples","title":"Examples","active":true},{"description":"","id":"docs","route":"/docs","title":"Docs","active":true},{"description":"","id":"pricing","route":"/pricing","title":"Pricing","active":false},{"description":"","id":"blog","route":"/blog","title":"Blog","active":false},{"description":"","id":"help","route":"/help","title":"Help","active":true}],"explore":[{"id":"features","title":"Features","description":"","route":"/features","active":true},{"id":"examples","title":"Examples","description":"","route":"/examples","active":true},{"id":"blog","title":"Blog","description":"","route":"/blog","active":true},{"id":"contact-us","title":"Contact us","description":"","route":"/contact-us","active":true},{"id":"pricing","title":"Pricing","description":"","route":"/pricing","active":false}],"docsVersions":[{"slug":"/4.0","desc":"4.0","index":"/0-introduction","active":true},{"slug":"/3.1","desc":"3.1","index":"/0-introduction","active":true},{"slug":"/3.0","desc":"3.0","index":"/0-introduction","active":true}],"social":[{"description":"Check our npm","fontAwesomeIcon":"fab fa-npm","title":"npm","url":"https://www.npmjs.com/package/@silevis/reactgrid","active":true},{"description":"Check our github repo","fontAwesomeIcon":"fab fa-github","title":"Github","url":"https://github.com/silevis/reactgrid","active":true},{"description":"Check our Twitter profile","fontAwesomeIcon":"fab fa-twitter","title":"Twitter","url":"https://twitter.com/ReactGrid","active":true},{"description":"Chat on Gitter","fontAwesomeIcon":"fab fa-gitter","title":"Gitter","url":"https://gitter.im/silevis-reactgrid/community","active":false},{"description":"Join our community","fontAwesomeIcon":"fab fa-discord","title":"Discord","url":"https://discord.gg/tWYV64j","active":true}],"docsPagesOrder":["/Za","/Tutorial","/Introduction"]}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"posttype\": \"docs\",\n  \"title\": \"EmailCell\",\n  \"metaTitle\": \"EmailCell template\",\n  \"metaDescription\": \"ReactGrid docs\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This cell renders text value with the possibility to validate its value and wrap the result into \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"React.ReactNode\"), \" objects.\"), mdx(\"h4\", null, \"Implementation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"EmailCell\"), \" implementation on \", mdx(\"a\", {\n    href: \"https://github.com/silevis/reactgrid/blob/develop/src/lib/CellTemplates/EmailCellTemplate.tsx\",\n    target: \"_blank\"\n  }, \" github \", mdx(\"i\", {\n    className: \"fas fa-external-link-alt fa-xs pl-1\"\n  })))), mdx(\"h4\", null, \"Interface declaration\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"ts\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-ts\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"interface\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"EmailCell\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"extends\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"Cell\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"type\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"email\\\"\"), \"\\n  text\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"string\"), \"\\n  validator\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"text\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"string\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"boolean\"), \"\\n  renderer\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"text\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin\"\n  }, \"string\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" React\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"ReactNode\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"type\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"email\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type of cell template\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text content of cell\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"validator?\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"(text: string) => boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Optional validation function, if undefined - returns \", mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"true\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"renderer?\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"(text: string) => React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Optional, gives oportunity to wrap \", mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"text\"), \" property into any \", mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"ReactNode\"), \" object\")))));\n}\n;\nMDXContent.isMDXComponent = true;","id":"a4868367-89dc-5cb0-b7fc-3699aa9eef77","excerpt":"This cell renders text value with the possibility to validate its value and wrap the result into  React.ReactNode  objects. Implementation Open  EmailCell…","frontmatter":{"title":"EmailCell","metaDescription":"ReactGrid docs","metaTitle":"EmailCell template","proMark":null}},"allMdx":{"edges":[{"node":{"excerpt":"ReactGrid lets you create custom data grids inside your ReactJS applications, which look and feel like spreadsheets. About MIT and PRO…","fields":{"slug":"/3.0/0-introduction/"},"frontmatter":{"posttype":"docs","title":"Introduction","metaDescription":"ReactGrid docs","metaTitle":"Introduction","proMark":null}}},{"node":{"excerpt":"Introduction In this guide, we're going to build a very simple React App, which will make use of ReactGrid. Initialize a React App with…","fields":{"slug":"/3.0/1-getting-started/"},"frontmatter":{"posttype":"docs","title":"Getting started","metaDescription":"ReactGrid docs","metaTitle":"Getting started","proMark":null}}},{"node":{"excerpt":"In this section you will learn about common features of ReactGrid and their example implementations. Handling data changes Column resizing…","fields":{"slug":"/3.0/2-implementing-core-features/"},"frontmatter":{"posttype":"docs","title":"Implementing core features","metaDescription":"ReactGrid docs","metaTitle":"Implementing core features","proMark":null}}},{"node":{"excerpt":"Idea of handling data changes A user changes the value of a cell. Among others, it could mean that the user has: typed a new value into a…","fields":{"slug":"/3.0/2-implementing-core-features/1-handling-changes/"},"frontmatter":{"posttype":"docs","title":"Handling data changes","metaDescription":"ReactGrid docs","metaTitle":"Handling data changes","proMark":null}}},{"node":{"excerpt":"Allow column to be resized For each column which should be resizable, add the  resizable  property\nto the corresponding column object and…","fields":{"slug":"/3.0/2-implementing-core-features/2-column-resizing/"},"frontmatter":{"posttype":"docs","title":"Column resizing","metaDescription":"ReactGrid docs","metaTitle":"Column resizing","proMark":true}}},{"node":{"excerpt":"How to implement column and row reordering? This guide is based on  getting started . 1. Add some new imports for further usage We'll need…","fields":{"slug":"/3.0/2-implementing-core-features/3-column-and-row-reordering/"},"frontmatter":{"posttype":"docs","title":"Column and row reordering","metaDescription":"ReactGrid docs","metaTitle":"Column and row reordering","proMark":true}}},{"node":{"excerpt":"Introduction ReactGrid allows you to stick chosen rows and columns at the top or left side and additionally on the right and at the bottom…","fields":{"slug":"/3.0/2-implementing-core-features/4-sticky/"},"frontmatter":{"posttype":"docs","title":"Sticky rows and columns","metaDescription":"ReactGrid docs","metaTitle":"Sticky rows and columns","proMark":true}}},{"node":{"excerpt":"ReactGrid has three properties related to selections inside the grid via  ReactGrid : enableRangeSelection enableRowSelection…","fields":{"slug":"/3.0/2-implementing-core-features/4a-selections/"},"frontmatter":{"posttype":"docs","title":"Selections","metaDescription":"ReactGrid docs","metaTitle":"Selections","proMark":true}}},{"node":{"excerpt":"ReactGrid supports fill handle action in PRO version, but it is disabled by default. To turn it on you have to simply\nadd  enableFillHandle…","fields":{"slug":"/3.0/2-implementing-core-features/4b-fill-handle/"},"frontmatter":{"posttype":"docs","title":"Fill handle","metaDescription":"ReactGrid docs","metaTitle":"Fill handle","proMark":true}}},{"node":{"excerpt":"ReactGrid comes with a custom context menu feature. Custom menu entries can be easily created thus\nallowing for personalized experiences.\nBy…","fields":{"slug":"/3.0/2-implementing-core-features/5-context-menu/"},"frontmatter":{"posttype":"docs","title":"Context menu","metaDescription":"ReactGrid docs","metaTitle":"Context menu","proMark":true}}},{"node":{"excerpt":"ReactGrid introduces a brand new feature called  group Id . The main purpose of it is to avoid queueing changes by marking cells on  groupId…","fields":{"slug":"/3.0/2-implementing-core-features/5a-groupId/"},"frontmatter":{"posttype":"docs","title":"Group Id","metaDescription":"ReactGrid docs","metaTitle":"Group Id","proMark":null}}},{"node":{"excerpt":"Highlights usage This guide is based on  getting started . Highlights allow you to alter arbitrary cells in the grid\nby applying custom CSS…","fields":{"slug":"/3.0/2-implementing-core-features/6-highlights/"},"frontmatter":{"posttype":"docs","title":"Highlights","metaDescription":"ReactGrid docs","metaTitle":"Highlights","proMark":null}}},{"node":{"excerpt":"Focus locations ReactGrid has two properties related to focus location inside the grid via  ReactGrid : focusLocation initialFocusLocation…","fields":{"slug":"/3.0/2-implementing-core-features/7-managing-focus/"},"frontmatter":{"posttype":"docs","title":"Focus management","metaDescription":"ReactGrid docs","metaTitle":"Focus management","proMark":null}}},{"node":{"excerpt":"About ReactGrig embedding, virtual scrolling and sticky panes pinning ReactGrid  component isn't limited by height and width so its…","fields":{"slug":"/3.0/2-implementing-core-features/8-embedding-on-website/"},"frontmatter":{"posttype":"docs","title":"Embedding on website","metaDescription":"ReactGrid docs","metaTitle":"Embedding on website","proMark":null}}},{"node":{"excerpt":"About keyboard events ReactGrid allows you to interact with the grid using keyboard shortcuts in a way known from other spreadsheet-like…","fields":{"slug":"/3.0/2-implementing-core-features/9-keyboard-shortcuts/"},"frontmatter":{"posttype":"docs","title":"Keyboard shortcuts","metaDescription":"ReactGrid docs","metaTitle":"Keyboard shortcuts","proMark":null}}},{"node":{"excerpt":"Introduction This feature extends width of top sticky pane to full available space inside ReactGrid's parent.  Usage Add…","fields":{"slug":"/3.0/2-implementing-core-features/9a-full-width-header/"},"frontmatter":{"posttype":"docs","title":"Full width header","metaDescription":"ReactGrid docs","metaTitle":"Full width header","proMark":null}}},{"node":{"excerpt":"Adding i18n ReactGrid has a few optional text labels that you could replace. All of the available translations are defined in \n TextLabels…","fields":{"slug":"/3.0/2-implementing-core-features/9b-internationalization/"},"frontmatter":{"posttype":"docs","title":"Internationalization","metaDescription":"ReactGrid docs","metaTitle":"Internationalization","proMark":true}}},{"node":{"excerpt":"Idea of cell templates In  getting started  chapter we declared cells array to be part of ReactGrid property. Each cell template has its own…","fields":{"slug":"/3.0/4-cell-templates/"},"frontmatter":{"posttype":"docs","title":"Cell templates","metaDescription":"ReactGrid docs","metaTitle":"Cell templates introduction","proMark":null}}},{"node":{"excerpt":"This cell type displays checkbox input. This template has disabled edit mode. Implementation Open  CheckboxCell  implementation on   github…","fields":{"slug":"/3.0/4-cell-templates/2-CheckboxCell/"},"frontmatter":{"posttype":"docs","title":"CheckboxCell","metaDescription":"ReactGrid docs","metaTitle":"CheckboxCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser date picker in edit mode.  Implementation Open  DateCell  implementation on…","fields":{"slug":"/3.0/4-cell-templates/3-DateCell/"},"frontmatter":{"posttype":"docs","title":"DateCell","metaDescription":"ReactGrid docs","metaTitle":"DateCell template","proMark":null}}},{"node":{"excerpt":"This cell renders text value with the possibility to validate its value and wrap the result into  React.ReactNode  objects. Implementation…","fields":{"slug":"/3.0/4-cell-templates/4-EmailCell/"},"frontmatter":{"posttype":"docs","title":"EmailCell","metaDescription":"ReactGrid docs","metaTitle":"EmailCell template","proMark":null}}},{"node":{"excerpt":"GroupCell  contains data about a single node in the tree structure of the data. This cell template renders text with \nthe preceding chevron…","fields":{"slug":"/3.0/4-cell-templates/5-GroupCell/"},"frontmatter":{"posttype":"docs","title":"GroupCell","metaDescription":"ReactGrid docs","metaTitle":"GroupCell template","proMark":null}}},{"node":{"excerpt":"The main purpose of this cell is to mark its content as not focusable and read-only. Usually used to mark header rows \nand columns…","fields":{"slug":"/3.0/4-cell-templates/6-HeaderCell/"},"frontmatter":{"posttype":"docs","title":"HeaderCell","metaDescription":"ReactGrid docs","metaTitle":"HeaderCell template","proMark":null}}},{"node":{"excerpt":"Displays number, this cell allows to customize format number values using  Intl.NumberFormat .  Implementation Open  NumberCell…","fields":{"slug":"/3.0/4-cell-templates/7-NumberCell/"},"frontmatter":{"posttype":"docs","title":"NumberCell","metaDescription":"ReactGrid docs","metaTitle":"NumberCell template","proMark":null}}},{"node":{"excerpt":"This template allows to display text as a string value. Optionally it also gives \na possibility to change rendering method and validate…","fields":{"slug":"/3.0/4-cell-templates/8-TextCell/"},"frontmatter":{"posttype":"docs","title":"TextCell","metaDescription":"ReactGrid docs","metaTitle":"TextCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser time picker in edit mode.\nKeep in mind:  time  attribute that stores  Date…","fields":{"slug":"/3.0/4-cell-templates/9-TimeCell/"},"frontmatter":{"posttype":"docs","title":"TimeCell","metaDescription":"ReactGrid docs","metaTitle":"TimeCell interface","proMark":null}}},{"node":{"excerpt":"Introduction Creating a cell template is the best way to customize data visualization and behaviour in ReactGrid.\nYou can define your own…","fields":{"slug":"/3.0/5-create-your-own-cell-template/"},"frontmatter":{"posttype":"docs","title":"Create your own cell template","metaDescription":"ReactGrid docs","metaTitle":"Create your own cell template","proMark":null}}},{"node":{"excerpt":"In this chapter, you will learn about simple and advanced ReactGrid components styling using Sass variables. Basic styling Advanced styling…","fields":{"slug":"/3.0/6-styling/"},"frontmatter":{"posttype":"docs","title":"Styling","metaDescription":"ReactGrid docs","metaTitle":"Style your ReactGrid","proMark":null}}},{"node":{"excerpt":"Introduction For the correct display of the component it's required to import the basic styles contained directly inside \n @silevis…","fields":{"slug":"/3.0/6-styling/0-basic-styling/"},"frontmatter":{"posttype":"docs","title":"Basic styling","metaDescription":"ReactGrid docs","metaTitle":"Basic styling","proMark":null}}},{"node":{"excerpt":"ReactGrid lets you style all key components using Sass variables.  Before you use  .scss  files you have to install  node-sass  package: To…","fields":{"slug":"/3.0/6-styling/1-advanced-styling/"},"frontmatter":{"posttype":"docs","title":"Advanced styling","metaDescription":"ReactGrid docs","metaTitle":"Advanced styling","proMark":null}}},{"node":{"excerpt":"ReactGrid uses an expanded set of variables you can override. Color related variables Color variables Shadow variables Context menu…","fields":{"slug":"/3.0/6-styling/2-sass-variables/"},"frontmatter":{"posttype":"docs","title":"Sass variables","metaDescription":"ReactGrid docs","metaTitle":"Sass variables","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains interfaces, types and functions exported from  ReactGrid  package to compose grids,\ndefine custom behaviour and data…","fields":{"slug":"/3.0/7-api/"},"frontmatter":{"posttype":"docs","title":"API Reference","metaDescription":"ReactGrid docs","metaTitle":"API Reference","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following interfaces: Interfaces ReactGridProps Row Column Cell CellTemplates CellTemplate CellChange CellLocation…","fields":{"slug":"/3.0/7-api/0-interfaces/"},"frontmatter":{"posttype":"docs","title":"Interfaces","metaDescription":"ReactGrid docs","metaTitle":"Interfaces","proMark":null}}},{"node":{"excerpt":"ReactGrid component has two essential properties which you must pass in properties to render -  columns  and  rows . Definition Properties…","fields":{"slug":"/3.0/7-api/0-interfaces/1-reactgrid-props/"},"frontmatter":{"posttype":"docs","title":"ReactGrid & ReactGridProps","metaDescription":"ReactGrid docs","metaTitle":"ReactGridProps interface","proMark":null}}},{"node":{"excerpt":"Row interface contains two necessary properties:  rowId  and  cells . It contains essential information about the grid row.\n cells  field…","fields":{"slug":"/3.0/7-api/0-interfaces/2-row/"},"frontmatter":{"posttype":"docs","title":"Row","metaDescription":"ReactGrid docs","metaTitle":"Row interface","proMark":null}}},{"node":{"excerpt":"This interface represents column in grid.  Column  interface contains only one necessary property:  columnId . Definition Properties…","fields":{"slug":"/3.0/7-api/0-interfaces/3-column/"},"frontmatter":{"posttype":"docs","title":"Column","metaDescription":"ReactGrid docs","metaTitle":"Column interface","proMark":null}}},{"node":{"excerpt":"Cell  interface is a base for built-in cell templates and your own, it has only one necessary property -  type . Definition Properties…","fields":{"slug":"/3.0/7-api/0-interfaces/4-cell/"},"frontmatter":{"posttype":"docs","title":"Cell","metaDescription":"ReactGrid docs","metaTitle":"Cell interface","proMark":null}}},{"node":{"excerpt":"CellTemplate  is an interface used for communication between ReactGrid and a cell.\nAt this stage if you are still not familiar with cell…","fields":{"slug":"/3.0/7-api/0-interfaces/5-cell-template/"},"frontmatter":{"posttype":"docs","title":"CellTemplate","metaDescription":"ReactGrid docs","metaTitle":"CellTemplate interface","proMark":null}}},{"node":{"excerpt":"CellLocation  is an interface that describes focus position inside the grid. Definition Properties Property name Type Property description…","fields":{"slug":"/3.0/7-api/0-interfaces/6-cell-location/"},"frontmatter":{"posttype":"docs","title":"CellLocation","metaDescription":"ReactGrid docs","metaTitle":"CellLocation interface","proMark":null}}},{"node":{"excerpt":"CellTemplates  is an interface describes your custom cell templates as key-value object. \nKey of  CellTemplates  interface have to be equal…","fields":{"slug":"/3.0/7-api/0-interfaces/6a-cell-templates/"},"frontmatter":{"posttype":"docs","title":"CellTemplates","metaDescription":"ReactGrid docs","metaTitle":"CellTemplates interface","proMark":null}}},{"node":{"excerpt":"CellStyle  interface prevents passing unwanted CSS properties that could break down grid rendering. Definition Properties Property name Type…","fields":{"slug":"/3.0/7-api/0-interfaces/7-cell-style/"},"frontmatter":{"posttype":"docs","title":"CellStyle","metaDescription":"ReactGrid docs","metaTitle":"CellStyle interface","proMark":null}}},{"node":{"excerpt":"The context menu is part of the grid, each menu option must implement the interface below. Definition Properties Property name Type Property…","fields":{"slug":"/3.0/7-api/0-interfaces/8-menuoption/"},"frontmatter":{"posttype":"docs","title":"MenuOption","metaDescription":"ReactGrid docs","metaTitle":"MenuOption interface","proMark":null}}},{"node":{"excerpt":"Highlight is an element to mark any cell inside the grid. Highlight (opposed to  focus ): it can be placed on any cell it must be managed by…","fields":{"slug":"/3.0/7-api/0-interfaces/9-highlight/"},"frontmatter":{"posttype":"docs","title":"Highlight","metaDescription":"ReactGrid docs","metaTitle":"Highlight interface","proMark":null}}},{"node":{"excerpt":"TextLabels  describes a set of text labels used by ReactGrid.  Definition Properties Property name Type Property description…","fields":{"slug":"/3.0/7-api/0-interfaces/90-textlabels/"},"frontmatter":{"posttype":"docs","title":"TextLabels","metaDescription":"ReactGrid docs","metaTitle":"TextLabels interface","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following types: Compatible CellChange Uncertain UncertainCompatible Id DropPosition DefaultCellTypes SelectionMode","fields":{"slug":"/3.0/7-api/1-types/"},"frontmatter":{"posttype":"docs","title":"Types","metaDescription":"ReactGrid docs","metaTitle":"Types","proMark":null}}},{"node":{"excerpt":"CompatibleCell  is an extended and exchangeable cell (compatible with different types).  Definition Properties Property name Type Property…","fields":{"slug":"/3.0/7-api/1-types/1-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"Compatible","metaDescription":"ReactGrid docs","metaTitle":"Compatible type","proMark":null}}},{"node":{"excerpt":"CellChange  type is used by  onCellsChanged  callback in  ReactGrid  component.  CellChange  represents \nmutually exclusive changes to a…","fields":{"slug":"/3.0/7-api/1-types/2-cell-change/"},"frontmatter":{"posttype":"docs","title":"CellChange","metaDescription":"ReactGrid docs","metaTitle":"CellChange type","proMark":null}}},{"node":{"excerpt":"Uncertain  is a cell type that every field of  TCell  is optional. \nCell of this type will have only one essential field provided by  Cell…","fields":{"slug":"/3.0/7-api/1-types/2-uncertain-cell/"},"frontmatter":{"posttype":"docs","title":"Uncertain","metaDescription":"ReactGrid docs","metaTitle":"Uncertain type","proMark":null}}},{"node":{"excerpt":"UncertainCompatible  is a cell type that is compatible with other cell types \nthat can be instances of various cell types (e.g.  DataCell…","fields":{"slug":"/3.0/7-api/1-types/3-uncertain-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"UncertainCompatible","metaDescription":"ReactGrid docs","metaTitle":"UncertainCompatible type","proMark":null}}},{"node":{"excerpt":"Id  is a common type to identify many objects in grid e.g.:  Highlight ,  CellLocation , CellChange ,   Column ,  Row Id  can be a  number…","fields":{"slug":"/3.0/7-api/1-types/4-id/"},"frontmatter":{"posttype":"docs","title":"Id","metaDescription":"ReactGrid docs","metaTitle":"Id type","proMark":null}}},{"node":{"excerpt":"Indicates where row/column was dropped. Used by  ReactGridProps  callbacks. Definition","fields":{"slug":"/3.0/7-api/1-types/5-drop-position/"},"frontmatter":{"posttype":"docs","title":"DropPosition","metaDescription":"ReactGrid docs","metaTitle":"DropPosition type","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains a union of basic cells usually used for consuming changes and \nmarking cells array inside the data row. Definition","fields":{"slug":"/3.0/7-api/1-types/6-default-cells/"},"frontmatter":{"posttype":"docs","title":"DefaultCellTypes","metaDescription":"ReactGrid docs","metaTitle":"DefaultCellTypes","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains three types of values which can be used in selection. It is  row ,  column  or  range . Definition","fields":{"slug":"/3.0/7-api/1-types/7-selection-mode/"},"frontmatter":{"posttype":"docs","title":"Selection mode","metaDescription":"ReactGrid docs","metaTitle":"Selection mode","proMark":null}}},{"node":{"excerpt":"Keycodes Keycode related functions are commonly used by every cell template and they uses the unicode value of pressed keyboard key\n(exacly…","fields":{"slug":"/3.0/7-api/2-functions/"},"frontmatter":{"posttype":"docs","title":"Functions & Enums","metaDescription":"ReactGrid docs","metaTitle":"Functions & Enums","proMark":null}}},{"node":{"excerpt":"Why don’t you provide a ready to use DataTable component? This is actually a feature! We want to give you the freedom of how you want to…","fields":{"slug":"/3.0/8-FAQ/"},"frontmatter":{"posttype":"docs","title":"FAQ","metaDescription":"ReactGrid docs","metaTitle":"Frequently asked question","proMark":null}}},{"node":{"excerpt":"ReactGrid lets you create custom data grids inside your ReactJS applications, which look and feel like spreadsheets. About MIT and PRO…","fields":{"slug":"/3.1/0-introduction/"},"frontmatter":{"posttype":"docs","title":"Introduction","metaDescription":"ReactGrid docs","metaTitle":"Introduction","proMark":null}}},{"node":{"excerpt":"Introduction In this guide, we're going to build a very simple React App, which will make use of ReactGrid. Initialize a React App with…","fields":{"slug":"/3.1/1-getting-started/"},"frontmatter":{"posttype":"docs","title":"Getting started","metaDescription":"ReactGrid docs","metaTitle":"Getting started","proMark":null}}},{"node":{"excerpt":"In this section you will learn about common features of ReactGrid and their example implementations. Handling data changes Column resizing…","fields":{"slug":"/3.1/2-implementing-core-features/"},"frontmatter":{"posttype":"docs","title":"Implementing core features","metaDescription":"ReactGrid docs","metaTitle":"Implementing core features","proMark":null}}},{"node":{"excerpt":"Idea of handling data changes A user changes the value of a cell. Among others, it could mean that the user has: committed a new value into…","fields":{"slug":"/3.1/2-implementing-core-features/1-handling-changes/"},"frontmatter":{"posttype":"docs","title":"Handling data changes","metaDescription":"ReactGrid docs","metaTitle":"Handling data changes","proMark":null}}},{"node":{"excerpt":"Allow column to be resized For each column which should be resizable, add the  resizable  property\nto the corresponding column object and…","fields":{"slug":"/3.1/2-implementing-core-features/2-column-resizing/"},"frontmatter":{"posttype":"docs","title":"Column resizing","metaDescription":"ReactGrid docs","metaTitle":"Column resizing","proMark":true}}},{"node":{"excerpt":"How to implement column and row reordering? This guide is based on  getting started . 1. Update person interface and people data Our  Person…","fields":{"slug":"/3.1/2-implementing-core-features/3-column-and-row-reordering/"},"frontmatter":{"posttype":"docs","title":"Column and row reordering","metaDescription":"ReactGrid docs","metaTitle":"Column and row reordering","proMark":true}}},{"node":{"excerpt":"Introduction ReactGrid allows you to stick chosen rows and columns at the top or left side and additionally on the right and at the bottom…","fields":{"slug":"/3.1/2-implementing-core-features/4-sticky/"},"frontmatter":{"posttype":"docs","title":"Sticky rows and columns","metaDescription":"ReactGrid docs","metaTitle":"Sticky rows and columns","proMark":true}}},{"node":{"excerpt":"ReactGrid has three properties related to selections inside the grid via  ReactGrid : enableRangeSelection enableRowSelection…","fields":{"slug":"/3.1/2-implementing-core-features/4a-selections/"},"frontmatter":{"posttype":"docs","title":"Selections","metaDescription":"ReactGrid docs","metaTitle":"Selections","proMark":true}}},{"node":{"excerpt":"ReactGrid supports fill handle action in PRO version, but it is disabled by default. To turn it on you have to simply\nadd  enableFillHandle…","fields":{"slug":"/3.1/2-implementing-core-features/4b-fill-handle/"},"frontmatter":{"posttype":"docs","title":"Fill handle","metaDescription":"ReactGrid docs","metaTitle":"Fill handle","proMark":true}}},{"node":{"excerpt":"ReactGrid comes with a custom context menu feature. Custom menu entries can be easily created thus\nallowing for personalized experiences.\nBy…","fields":{"slug":"/3.1/2-implementing-core-features/5-context-menu/"},"frontmatter":{"posttype":"docs","title":"Context menu","metaDescription":"ReactGrid docs","metaTitle":"Context menu","proMark":true}}},{"node":{"excerpt":"ReactGrid introduces a brand new feature called  group Id . The main purpose of it is to avoid queueing changes by marking cells on  groupId…","fields":{"slug":"/3.1/2-implementing-core-features/5a-groupId/"},"frontmatter":{"posttype":"docs","title":"Group Id","metaDescription":"ReactGrid docs","metaTitle":"Group Id","proMark":null}}},{"node":{"excerpt":"Highlights usage This guide is based on  getting started . Highlights allow you to alter arbitrary cells in the grid\nby applying custom CSS…","fields":{"slug":"/3.1/2-implementing-core-features/6-highlights/"},"frontmatter":{"posttype":"docs","title":"Highlights","metaDescription":"ReactGrid docs","metaTitle":"Highlights","proMark":null}}},{"node":{"excerpt":"Focus locations ReactGrid has two properties related to focus location inside the grid via  ReactGrid : focusLocation initialFocusLocation…","fields":{"slug":"/3.1/2-implementing-core-features/7-managing-focus/"},"frontmatter":{"posttype":"docs","title":"Focus management","metaDescription":"ReactGrid docs","metaTitle":"Focus management","proMark":null}}},{"node":{"excerpt":"About ReactGrig embedding, virtual scrolling and sticky panes pinning ReactGrid  component isn't limited by height and width so its…","fields":{"slug":"/3.1/2-implementing-core-features/8-embedding-on-website/"},"frontmatter":{"posttype":"docs","title":"Embedding on a website","metaDescription":"ReactGrid docs","metaTitle":"Embedding on a website","proMark":null}}},{"node":{"excerpt":"About keyboard events ReactGrid allows you to interact with the grid using keyboard shortcuts in a way known from other spreadsheet-like…","fields":{"slug":"/3.1/2-implementing-core-features/9-keyboard-shortcuts/"},"frontmatter":{"posttype":"docs","title":"Keyboard shortcuts","metaDescription":"ReactGrid docs","metaTitle":"Keyboard shortcuts","proMark":null}}},{"node":{"excerpt":"Idea of Undo/redo feature An Undo/Redo feature isn't implemented internally, but we prepared an example which you can follow. ReactGrid…","fields":{"slug":"/3.1/2-implementing-core-features/9a-undo-redo-feature/"},"frontmatter":{"posttype":"docs","title":"Undo/redo feature","metaDescription":"ReactGrid docs","metaTitle":"Undo/redo feature","proMark":null}}},{"node":{"excerpt":"Introduction This feature extends width of top sticky pane to full available space inside ReactGrid's parent.  Usage Add…","fields":{"slug":"/3.1/2-implementing-core-features/9b-full-width-header/"},"frontmatter":{"posttype":"docs","title":"Full width header","metaDescription":"ReactGrid docs","metaTitle":"Full width header","proMark":null}}},{"node":{"excerpt":"Adding i18n ReactGrid has a few optional text labels that you could replace. All of the available translations are defined in \n TextLabels…","fields":{"slug":"/3.1/2-implementing-core-features/9c-internationalization/"},"frontmatter":{"posttype":"docs","title":"Internationalization","metaDescription":"ReactGrid docs","metaTitle":"Internationalization","proMark":true}}},{"node":{"excerpt":"Introduction This feature disables sticky when the sum of the sizes of sticky panes overflows given breakpoint value (by default  5…","fields":{"slug":"/3.1/2-implementing-core-features/9d-responsive-sticky/"},"frontmatter":{"posttype":"docs","title":"Responsive sticky","metaDescription":"ReactGrid docs","metaTitle":"Responsive sticky","proMark":null}}},{"node":{"excerpt":"Introduction This feature allows you to set colspan and rowspan in a cell. Spanned cell don't pushes the other from their origin position…","fields":{"slug":"/3.1/2-implementing-core-features/9e-cell-span/"},"frontmatter":{"posttype":"docs","title":"Cell span","metaDescription":"ReactGrid docs","metaTitle":"Cell span","proMark":null}}},{"node":{"excerpt":"Idea of cell templates In  getting started  chapter we declared cells array to be part of ReactGrid property. Each cell template has its own…","fields":{"slug":"/3.1/4-cell-templates/"},"frontmatter":{"posttype":"docs","title":"Cell templates","metaDescription":"ReactGrid docs","metaTitle":"Cell templates introduction","proMark":null}}},{"node":{"excerpt":"This cell type displays checkbox input. This template has disabled edit mode. Implementation Open  CheckboxCell  implementation on   github…","fields":{"slug":"/3.1/4-cell-templates/2-CheckboxCell/"},"frontmatter":{"posttype":"docs","title":"CheckboxCell","metaDescription":"ReactGrid docs","metaTitle":"CheckboxCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser date picker in edit mode.  Implementation Open  DateCell  implementation on…","fields":{"slug":"/3.1/4-cell-templates/3-DateCell/"},"frontmatter":{"posttype":"docs","title":"DateCell","metaDescription":"ReactGrid docs","metaTitle":"DateCell template","proMark":null}}},{"node":{"excerpt":"This cell renders dropdown from    react-select  package. Implementation Open  DropdownCell  implementation on   github  Interface…","fields":{"slug":"/3.1/4-cell-templates/3a-DropdownCell/"},"frontmatter":{"posttype":"docs","title":"DropdownCell","metaDescription":"ReactGrid docs","metaTitle":"DropdownCell template","proMark":null}}},{"node":{"excerpt":"This cell renders text value with the possibility to validate its value and wrap the result into  React.ReactNode  objects. Implementation…","fields":{"slug":"/3.1/4-cell-templates/4-EmailCell/"},"frontmatter":{"posttype":"docs","title":"EmailCell","metaDescription":"ReactGrid docs","metaTitle":"EmailCell template","proMark":null}}},{"node":{"excerpt":"ChevronCell  contains data about a single node in the tree structure of the data. This cell template renders text with \nthe preceding…","fields":{"slug":"/3.1/4-cell-templates/5-ChevronCell/"},"frontmatter":{"posttype":"docs","title":"ChevronCell","metaDescription":"ReactGrid docs","metaTitle":"ChevronCell template","proMark":null}}},{"node":{"excerpt":"The main purpose of this cell is to mark its content as not focusable and read-only. Usually used to mark header rows \nand columns…","fields":{"slug":"/3.1/4-cell-templates/6-HeaderCell/"},"frontmatter":{"posttype":"docs","title":"HeaderCell","metaDescription":"ReactGrid docs","metaTitle":"HeaderCell template","proMark":null}}},{"node":{"excerpt":"Displays number, this cell allows to customize format number values using  Intl.NumberFormat .  Implementation Open  NumberCell…","fields":{"slug":"/3.1/4-cell-templates/7-NumberCell/"},"frontmatter":{"posttype":"docs","title":"NumberCell","metaDescription":"ReactGrid docs","metaTitle":"NumberCell template","proMark":null}}},{"node":{"excerpt":"This template allows to display text as a string value. Optionally it also gives \na possibility to change rendering method and validate…","fields":{"slug":"/3.1/4-cell-templates/8-TextCell/"},"frontmatter":{"posttype":"docs","title":"TextCell","metaDescription":"ReactGrid docs","metaTitle":"TextCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser time picker in edit mode.\nKeep in mind:  time  attribute that stores  Date…","fields":{"slug":"/3.1/4-cell-templates/9-TimeCell/"},"frontmatter":{"posttype":"docs","title":"TimeCell","metaDescription":"ReactGrid docs","metaTitle":"TimeCell interface","proMark":null}}},{"node":{"excerpt":"Introduction Creating a cell template is the best way to customize data visualization and behaviour in ReactGrid.\nYou can define your own…","fields":{"slug":"/3.1/5-create-your-own-cell-template/"},"frontmatter":{"posttype":"docs","title":"Create your own cell template","metaDescription":"ReactGrid docs","metaTitle":"Create your own cell template","proMark":null}}},{"node":{"excerpt":"In this chapter, you will learn about simple and advanced ReactGrid components styling using Sass variables. Basic styling Advanced styling…","fields":{"slug":"/3.1/6-styling/"},"frontmatter":{"posttype":"docs","title":"Styling","metaDescription":"ReactGrid docs","metaTitle":"Style your ReactGrid","proMark":null}}},{"node":{"excerpt":"Introduction For the correct display of the component it's required to import the basic styles contained directly inside \n @silevis…","fields":{"slug":"/3.1/6-styling/0-basic-styling/"},"frontmatter":{"posttype":"docs","title":"Basic styling","metaDescription":"ReactGrid docs","metaTitle":"Basic styling","proMark":null}}},{"node":{"excerpt":"ReactGrid lets you style all key components using Sass variables.  Before you use  .scss  files you have to install  node-sass  package: To…","fields":{"slug":"/3.1/6-styling/1-advanced-styling/"},"frontmatter":{"posttype":"docs","title":"Advanced styling","metaDescription":"ReactGrid docs","metaTitle":"Advanced styling","proMark":null}}},{"node":{"excerpt":"ReactGrid uses an expanded set of variables you can override. Color related variables Color variables Shadow variables Context menu…","fields":{"slug":"/3.1/6-styling/2-sass-variables/"},"frontmatter":{"posttype":"docs","title":"Sass variables","metaDescription":"ReactGrid docs","metaTitle":"Sass variables","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains interfaces, types and functions exported from  ReactGrid  package to compose grids,\ndefine custom behaviour and data…","fields":{"slug":"/3.1/7-api/"},"frontmatter":{"posttype":"docs","title":"API Reference","metaDescription":"ReactGrid docs","metaTitle":"API Reference","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following interfaces: Interfaces ReactGridProps Row Column Cell CellTemplates CellTemplate CellChange CellLocation…","fields":{"slug":"/3.1/7-api/0-interfaces/"},"frontmatter":{"posttype":"docs","title":"Interfaces","metaDescription":"ReactGrid docs","metaTitle":"Interfaces","proMark":null}}},{"node":{"excerpt":"ReactGrid component has two essential properties which you must pass in properties to render -  columns  and  rows . Definition Properties…","fields":{"slug":"/3.1/7-api/0-interfaces/1-reactgrid-props/"},"frontmatter":{"posttype":"docs","title":"ReactGrid & ReactGridProps","metaDescription":"ReactGrid docs","metaTitle":"ReactGridProps interface","proMark":null}}},{"node":{"excerpt":"Row interface contains two necessary properties:  rowId  and  cells . It contains essential information about the grid row.\n cells  field…","fields":{"slug":"/3.1/7-api/0-interfaces/2-row/"},"frontmatter":{"posttype":"docs","title":"Row","metaDescription":"ReactGrid docs","metaTitle":"Row interface","proMark":null}}},{"node":{"excerpt":"This interface represents column in grid.  Column  interface contains only one necessary property:  columnId . Definition Properties…","fields":{"slug":"/3.1/7-api/0-interfaces/3-column/"},"frontmatter":{"posttype":"docs","title":"Column","metaDescription":"ReactGrid docs","metaTitle":"Column interface","proMark":null}}},{"node":{"excerpt":"Cell  interface is a base for built-in cell templates and your own, it has only one necessary property -  type . Definition Properties…","fields":{"slug":"/3.1/7-api/0-interfaces/4-cell/"},"frontmatter":{"posttype":"docs","title":"Cell","metaDescription":"ReactGrid docs","metaTitle":"Cell interface","proMark":null}}},{"node":{"excerpt":"CellTemplate  is an interface used for communication between ReactGrid and a cell.\nAt this stage if you are still not familiar with cell…","fields":{"slug":"/3.1/7-api/0-interfaces/5-cell-template/"},"frontmatter":{"posttype":"docs","title":"CellTemplate","metaDescription":"ReactGrid docs","metaTitle":"CellTemplate interface","proMark":null}}},{"node":{"excerpt":"CellLocation  is an interface that describes position inside the grid. Definition Properties Property name Type Property description rowId…","fields":{"slug":"/3.1/7-api/0-interfaces/6-cell-location/"},"frontmatter":{"posttype":"docs","title":"CellLocation","metaDescription":"ReactGrid docs","metaTitle":"CellLocation interface","proMark":null}}},{"node":{"excerpt":"CellTemplates  is an interface describes your custom cell templates as key-value object. \nKey of  CellTemplates  interface have to be equal…","fields":{"slug":"/3.1/7-api/0-interfaces/6a-cell-templates/"},"frontmatter":{"posttype":"docs","title":"CellTemplates","metaDescription":"ReactGrid docs","metaTitle":"CellTemplates interface","proMark":null}}},{"node":{"excerpt":"CellStyle  styles single cell and prevents passing unwanted CSS properties that could break down view rendering.\nThis interface uses also a…","fields":{"slug":"/3.1/7-api/0-interfaces/7-cell-style/"},"frontmatter":{"posttype":"docs","title":"CellStyle","metaDescription":"ReactGrid docs","metaTitle":"CellStyle interface","proMark":null}}},{"node":{"excerpt":"The context menu is part of the grid, each menu option must implement the interface below. Definition Properties Property name Type Property…","fields":{"slug":"/3.1/7-api/0-interfaces/8-menuoption/"},"frontmatter":{"posttype":"docs","title":"MenuOption","metaDescription":"ReactGrid docs","metaTitle":"MenuOption interface","proMark":null}}},{"node":{"excerpt":"Highlight is an element to mark any cell inside the grid with custom border color or CSS class Highlight (opposed to  focus ): it can be…","fields":{"slug":"/3.1/7-api/0-interfaces/9-highlight/"},"frontmatter":{"posttype":"docs","title":"Highlight","metaDescription":"ReactGrid docs","metaTitle":"Highlight interface","proMark":null}}},{"node":{"excerpt":"TextLabels  describes a set of text labels used by ReactGrids internal i18n module. \nEach text label has its own default value. Definition…","fields":{"slug":"/3.1/7-api/0-interfaces/90-textlabels/"},"frontmatter":{"posttype":"docs","title":"TextLabels","metaDescription":"ReactGrid docs","metaTitle":"TextLabels interface","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following types: Compatible CellChange Uncertain UncertainCompatible Id DropPosition DefaultCellTypes SelectionMode","fields":{"slug":"/3.1/7-api/1-types/"},"frontmatter":{"posttype":"docs","title":"Types","metaDescription":"ReactGrid docs","metaTitle":"Types","proMark":null}}},{"node":{"excerpt":"CompatibleCell  is an extended and exchangeable cell (compatible with different types).  Definition Properties Property name Type Property…","fields":{"slug":"/3.1/7-api/1-types/1-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"Compatible","metaDescription":"ReactGrid docs","metaTitle":"Compatible type","proMark":null}}},{"node":{"excerpt":"CellChange  type is used by  onCellsChanged  callback in  ReactGrid  component. It represents \nmutually exclusive changes to a single cell…","fields":{"slug":"/3.1/7-api/1-types/2-cell-change/"},"frontmatter":{"posttype":"docs","title":"CellChange","metaDescription":"ReactGrid docs","metaTitle":"CellChange type","proMark":null}}},{"node":{"excerpt":"Uncertain  is a cell type that every field of  TCell  is optional. \nCell of this type will have only one essential field provided by  Cell…","fields":{"slug":"/3.1/7-api/1-types/2-uncertain-cell/"},"frontmatter":{"posttype":"docs","title":"Uncertain","metaDescription":"ReactGrid docs","metaTitle":"Uncertain type","proMark":null}}},{"node":{"excerpt":"UncertainCompatible  is a cell type that is compatible with other cell types \nthat can be instances of various cell types (e.g.  DataCell…","fields":{"slug":"/3.1/7-api/1-types/3-uncertain-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"UncertainCompatible","metaDescription":"ReactGrid docs","metaTitle":"UncertainCompatible type","proMark":null}}},{"node":{"excerpt":"Id  is a common type to identify many objects in grid e.g.:  Highlight ,  CellLocation , CellChange ,   Column ,  Row Id  can be a  number…","fields":{"slug":"/3.1/7-api/1-types/4-id/"},"frontmatter":{"posttype":"docs","title":"Id","metaDescription":"ReactGrid docs","metaTitle":"Id type","proMark":null}}},{"node":{"excerpt":"Indicates where row/column was dropped. Used by  ReactGridProps  callbacks. Definition","fields":{"slug":"/3.1/7-api/1-types/5-drop-position/"},"frontmatter":{"posttype":"docs","title":"DropPosition","metaDescription":"ReactGrid docs","metaTitle":"DropPosition type","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains a union of basic cells usually used for consuming changes and \nmarking cells array inside the data row. Definition","fields":{"slug":"/3.1/7-api/1-types/6-default-cells/"},"frontmatter":{"posttype":"docs","title":"DefaultCellTypes","metaDescription":"ReactGrid docs","metaTitle":"DefaultCellTypes","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains three types of values which can be used in selection.\nIt is  row ,  column  or  range . It's used for marking currect…","fields":{"slug":"/3.1/7-api/1-types/7-selection-mode/"},"frontmatter":{"posttype":"docs","title":"SelectionMode","metaDescription":"ReactGrid docs","metaTitle":"SelectionMode","proMark":null}}},{"node":{"excerpt":"Keycodes Keycode related functions are commonly used by every cell template and they uses the unicode value of pressed keyboard key\n(exacly…","fields":{"slug":"/3.1/7-api/2-functions/"},"frontmatter":{"posttype":"docs","title":"Functions & Enums","metaDescription":"ReactGrid docs","metaTitle":"Functions & Enums","proMark":null}}},{"node":{"excerpt":"Why don’t you provide a ready to use DataTable component? This is actually a feature! We want to give you the freedom of how you want to…","fields":{"slug":"/3.1/8-FAQ/"},"frontmatter":{"posttype":"docs","title":"FAQ","metaDescription":"ReactGrid docs","metaTitle":"Frequently asked question","proMark":null}}},{"node":{"excerpt":"ReactGrid lets you create custom data grids inside your ReactJS applications, which look and feel like spreadsheets. Caveats a) If you…","fields":{"slug":"/4.0/0-introduction/"},"frontmatter":{"posttype":"docs","title":"Introduction","metaDescription":"ReactGrid docs","metaTitle":"Introduction","proMark":null}}},{"node":{"excerpt":"Introduction In this guide, we're going to build a very simple React App, which will make use of ReactGrid. Initialize a React App with…","fields":{"slug":"/4.0/1-getting-started/"},"frontmatter":{"posttype":"docs","title":"Getting started","metaDescription":"ReactGrid docs","metaTitle":"Getting started","proMark":null}}},{"node":{"excerpt":"In this section you will learn about common features of ReactGrid and their example implementations. Handling data changes Column resizing…","fields":{"slug":"/4.0/2-implementing-core-features/"},"frontmatter":{"posttype":"docs","title":"Implementing core features","metaDescription":"ReactGrid docs","metaTitle":"Implementing core features","proMark":null}}},{"node":{"excerpt":"Idea of handling data changes A user changes the value of a cell. Among others, it could mean that the user has: committed a new value into…","fields":{"slug":"/4.0/2-implementing-core-features/1-handling-changes/"},"frontmatter":{"posttype":"docs","title":"Handling data changes","metaDescription":"ReactGrid docs","metaTitle":"Handling data changes","proMark":null}}},{"node":{"excerpt":"Allow column to be resized For each column which should be resizable, add the  resizable  property\nto the corresponding column object and…","fields":{"slug":"/4.0/2-implementing-core-features/2-column-resizing/"},"frontmatter":{"posttype":"docs","title":"Column resizing","metaDescription":"ReactGrid docs","metaTitle":"Column resizing","proMark":null}}},{"node":{"excerpt":"How to implement column and row reordering? This guide is based on  getting started . 1. Update person interface and people data Our  Person…","fields":{"slug":"/4.0/2-implementing-core-features/3-column-and-row-reordering/"},"frontmatter":{"posttype":"docs","title":"Column and row reordering","metaDescription":"ReactGrid docs","metaTitle":"Column and row reordering","proMark":null}}},{"node":{"excerpt":"Introduction ReactGrid allows you to stick chosen rows and columns at the top or left side and additionally on the right and at the bottom…","fields":{"slug":"/4.0/2-implementing-core-features/4-sticky/"},"frontmatter":{"posttype":"docs","title":"Sticky rows and columns","metaDescription":"ReactGrid docs","metaTitle":"Sticky rows and columns","proMark":null}}},{"node":{"excerpt":"Introduction ReactGrid has three properties related to selections inside the grid via  ReactGrid : enableRangeSelection enableRowSelection…","fields":{"slug":"/4.0/2-implementing-core-features/4a-selections/"},"frontmatter":{"posttype":"docs","title":"Selections","metaDescription":"ReactGrid docs","metaTitle":"Selections","proMark":null}}},{"node":{"excerpt":"About fill handling in ReactGrid ReactGrid supports fill handle action, but it is disabled by default. To turn it on you have to simply\nadd…","fields":{"slug":"/4.0/2-implementing-core-features/4b-fill-handle/"},"frontmatter":{"posttype":"docs","title":"Fill handle","metaDescription":"ReactGrid docs","metaTitle":"Fill handle","proMark":null}}},{"node":{"excerpt":"Introduction ReactGrid comes with a custom context menu feature. Custom menu entries can be easily created thus\nallowing for personalized…","fields":{"slug":"/4.0/2-implementing-core-features/5-context-menu/"},"frontmatter":{"posttype":"docs","title":"Context menu","metaDescription":"ReactGrid docs","metaTitle":"Context menu","proMark":null}}},{"node":{"excerpt":"What is group id? ReactGrid introduces a brand new feature called  group Id . The main purpose of it is to avoid queueing changes by marking…","fields":{"slug":"/4.0/2-implementing-core-features/5a-groupId/"},"frontmatter":{"posttype":"docs","title":"Group Id","metaDescription":"ReactGrid docs","metaTitle":"Group Id","proMark":null}}},{"node":{"excerpt":"Highlights usage This guide is based on  getting started . Highlights allow you to alter arbitrary cells in the grid\nby applying custom CSS…","fields":{"slug":"/4.0/2-implementing-core-features/6-highlights/"},"frontmatter":{"posttype":"docs","title":"Highlights","metaDescription":"ReactGrid docs","metaTitle":"Highlights","proMark":null}}},{"node":{"excerpt":"Focus locations ReactGrid has two properties related to focus location inside the grid via  ReactGrid : focusLocation initialFocusLocation…","fields":{"slug":"/4.0/2-implementing-core-features/7-managing-focus/"},"frontmatter":{"posttype":"docs","title":"Focus management","metaDescription":"ReactGrid docs","metaTitle":"Focus management","proMark":null}}},{"node":{"excerpt":"About ReactGrig embedding, virtual scrolling and sticky panes pinning ReactGrid  component isn't limited by height and width so its…","fields":{"slug":"/4.0/2-implementing-core-features/8-embedding-on-website/"},"frontmatter":{"posttype":"docs","title":"Embedding on a website","metaDescription":"ReactGrid docs","metaTitle":"Embedding on a website","proMark":null}}},{"node":{"excerpt":"About keyboard events ReactGrid allows you to interact with the grid using keyboard shortcuts in a way known from other spreadsheet-like…","fields":{"slug":"/4.0/2-implementing-core-features/9-keyboard-shortcuts/"},"frontmatter":{"posttype":"docs","title":"Keyboard shortcuts","metaDescription":"ReactGrid docs","metaTitle":"Keyboard shortcuts","proMark":null}}},{"node":{"excerpt":"Idea of Undo/redo feature An Undo/Redo feature isn't implemented internally, but we prepared an example which you can follow. ReactGrid…","fields":{"slug":"/4.0/2-implementing-core-features/9a-undo-redo-feature/"},"frontmatter":{"posttype":"docs","title":"Undo/redo feature","metaDescription":"ReactGrid docs","metaTitle":"Undo/redo feature","proMark":null}}},{"node":{"excerpt":"Introduction This feature extends width of top sticky pane to full available space inside ReactGrid's parent.  Usage Add…","fields":{"slug":"/4.0/2-implementing-core-features/9b-full-width-header/"},"frontmatter":{"posttype":"docs","title":"Full width header","metaDescription":"ReactGrid docs","metaTitle":"Full width header","proMark":null}}},{"node":{"excerpt":"Adding i18n ReactGrid has a few optional text labels that you could replace. All of the available translations are defined in \n TextLabels…","fields":{"slug":"/4.0/2-implementing-core-features/9c-internationalization/"},"frontmatter":{"posttype":"docs","title":"Internationalization","metaDescription":"ReactGrid docs","metaTitle":"Internationalization","proMark":null}}},{"node":{"excerpt":"Introduction This feature disables sticky when the sum of the sizes of sticky panes overflows given breakpoint value (by default  5…","fields":{"slug":"/4.0/2-implementing-core-features/9d-responsive-sticky/"},"frontmatter":{"posttype":"docs","title":"Responsive sticky","metaDescription":"ReactGrid docs","metaTitle":"Responsive sticky","proMark":null}}},{"node":{"excerpt":"Introduction This feature allows you to set colspan and rowspan in a cell. Spanned cell don't pushes the other from their origin position…","fields":{"slug":"/4.0/2-implementing-core-features/9e-cell-span/"},"frontmatter":{"posttype":"docs","title":"Cell span","metaDescription":"ReactGrid docs","metaTitle":"Cell span","proMark":null}}},{"node":{"excerpt":"Idea of cell templates In  getting started  chapter we declared cells array to be part of ReactGrid property. Each cell template has its own…","fields":{"slug":"/4.0/4-cell-templates/"},"frontmatter":{"posttype":"docs","title":"Cell templates","metaDescription":"ReactGrid docs","metaTitle":"Cell templates introduction","proMark":null}}},{"node":{"excerpt":"This cell type displays checkbox input. This template has disabled edit mode. Implementation Open  CheckboxCell  implementation on   github…","fields":{"slug":"/4.0/4-cell-templates/2-CheckboxCell/"},"frontmatter":{"posttype":"docs","title":"CheckboxCell","metaDescription":"ReactGrid docs","metaTitle":"CheckboxCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser date picker in edit mode.  Implementation Open  DateCell  implementation on…","fields":{"slug":"/4.0/4-cell-templates/3-DateCell/"},"frontmatter":{"posttype":"docs","title":"DateCell","metaDescription":"ReactGrid docs","metaTitle":"DateCell template","proMark":null}}},{"node":{"excerpt":"This cell renders dropdown from    react-select  package. Implementation Open  DropdownCell  implementation on   github  Interface…","fields":{"slug":"/4.0/4-cell-templates/3a-DropdownCell/"},"frontmatter":{"posttype":"docs","title":"DropdownCell","metaDescription":"ReactGrid docs","metaTitle":"DropdownCell template","proMark":null}}},{"node":{"excerpt":"This cell renders text value with the possibility to validate its value and wrap the result into  React.ReactNode  objects. Implementation…","fields":{"slug":"/4.0/4-cell-templates/4-EmailCell/"},"frontmatter":{"posttype":"docs","title":"EmailCell","metaDescription":"ReactGrid docs","metaTitle":"EmailCell template","proMark":null}}},{"node":{"excerpt":"ChevronCell  contains data about a single node in the tree structure of the data. This cell template renders text with \nthe preceding…","fields":{"slug":"/4.0/4-cell-templates/5-ChevronCell/"},"frontmatter":{"posttype":"docs","title":"ChevronCell","metaDescription":"ReactGrid docs","metaTitle":"ChevronCell template","proMark":null}}},{"node":{"excerpt":"The main purpose of this cell is to mark its content as not focusable and read-only. Usually used to mark header rows \nand columns…","fields":{"slug":"/4.0/4-cell-templates/6-HeaderCell/"},"frontmatter":{"posttype":"docs","title":"HeaderCell","metaDescription":"ReactGrid docs","metaTitle":"HeaderCell template","proMark":null}}},{"node":{"excerpt":"Displays number, this cell allows to customize format number values using  Intl.NumberFormat .  Implementation Open  NumberCell…","fields":{"slug":"/4.0/4-cell-templates/7-NumberCell/"},"frontmatter":{"posttype":"docs","title":"NumberCell","metaDescription":"ReactGrid docs","metaTitle":"NumberCell template","proMark":null}}},{"node":{"excerpt":"This template allows to display text as a string value. Optionally it also gives \na possibility to change rendering method and validate…","fields":{"slug":"/4.0/4-cell-templates/8-TextCell/"},"frontmatter":{"posttype":"docs","title":"TextCell","metaDescription":"ReactGrid docs","metaTitle":"TextCell template","proMark":null}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser time picker in edit mode.\nKeep in mind:  time  attribute that stores  Date…","fields":{"slug":"/4.0/4-cell-templates/9-TimeCell/"},"frontmatter":{"posttype":"docs","title":"TimeCell","metaDescription":"ReactGrid docs","metaTitle":"TimeCell interface","proMark":null}}},{"node":{"excerpt":"Introduction Creating a cell template is the best way to customize data visualization and behaviour in ReactGrid.\nYou can define your own…","fields":{"slug":"/4.0/5-create-your-own-cell-template/"},"frontmatter":{"posttype":"docs","title":"Create your own cell template","metaDescription":"ReactGrid docs","metaTitle":"Create your own cell template","proMark":null}}},{"node":{"excerpt":"In this chapter, you will learn about simple and advanced ReactGrid components styling using Sass variables. Basic styling Advanced styling…","fields":{"slug":"/4.0/6-styling/"},"frontmatter":{"posttype":"docs","title":"Styling","metaDescription":"ReactGrid docs","metaTitle":"Style your ReactGrid","proMark":null}}},{"node":{"excerpt":"Introduction For the correct display of the component it's required to import the basic styles contained directly inside \n @silevis…","fields":{"slug":"/4.0/6-styling/0-basic-styling/"},"frontmatter":{"posttype":"docs","title":"Basic styling","metaDescription":"ReactGrid docs","metaTitle":"Basic styling","proMark":null}}},{"node":{"excerpt":"ReactGrid lets you style all key components using Sass variables.  Before you use  .scss  files you have to install  node-sass  package: To…","fields":{"slug":"/4.0/6-styling/1-advanced-styling/"},"frontmatter":{"posttype":"docs","title":"Advanced styling","metaDescription":"ReactGrid docs","metaTitle":"Advanced styling","proMark":null}}},{"node":{"excerpt":"ReactGrid uses an expanded set of variables you can override. Color related variables Color variables Shadow variables Context menu…","fields":{"slug":"/4.0/6-styling/2-sass-variables/"},"frontmatter":{"posttype":"docs","title":"Sass variables","metaDescription":"ReactGrid docs","metaTitle":"Sass variables","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains interfaces, types and functions exported from  ReactGrid  package to compose grids,\ndefine custom behaviour and data…","fields":{"slug":"/4.0/7-api/"},"frontmatter":{"posttype":"docs","title":"API Reference","metaDescription":"ReactGrid docs","metaTitle":"API Reference","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following interfaces: Interfaces ReactGridProps Row Column Cell CellTemplates CellTemplate CellChange CellLocation…","fields":{"slug":"/4.0/7-api/0-interfaces/"},"frontmatter":{"posttype":"docs","title":"Interfaces","metaDescription":"ReactGrid docs","metaTitle":"Interfaces","proMark":null}}},{"node":{"excerpt":"ReactGrid component has two essential properties which you must pass in properties to render -  columns  and  rows . Definition Properties…","fields":{"slug":"/4.0/7-api/0-interfaces/1-reactgrid-props/"},"frontmatter":{"posttype":"docs","title":"ReactGrid & ReactGridProps","metaDescription":"ReactGrid docs","metaTitle":"ReactGridProps interface","proMark":null}}},{"node":{"excerpt":"Row interface contains two necessary properties:  rowId  and  cells . It contains essential information about the grid row.\n cells  field…","fields":{"slug":"/4.0/7-api/0-interfaces/2-row/"},"frontmatter":{"posttype":"docs","title":"Row","metaDescription":"ReactGrid docs","metaTitle":"Row interface","proMark":null}}},{"node":{"excerpt":"This interface represents column in grid.  Column  interface contains only one necessary property:  columnId . Definition Properties…","fields":{"slug":"/4.0/7-api/0-interfaces/3-column/"},"frontmatter":{"posttype":"docs","title":"Column","metaDescription":"ReactGrid docs","metaTitle":"Column interface","proMark":null}}},{"node":{"excerpt":"Cell  interface is a base for built-in cell templates and your own, it has only one necessary property -  type . Definition Properties…","fields":{"slug":"/4.0/7-api/0-interfaces/4-cell/"},"frontmatter":{"posttype":"docs","title":"Cell","metaDescription":"ReactGrid docs","metaTitle":"Cell interface","proMark":null}}},{"node":{"excerpt":"CellTemplate  is an interface used for communication between ReactGrid and a cell.\nAt this stage if you are still not familiar with cell…","fields":{"slug":"/4.0/7-api/0-interfaces/5-cell-template/"},"frontmatter":{"posttype":"docs","title":"CellTemplate","metaDescription":"ReactGrid docs","metaTitle":"CellTemplate interface","proMark":null}}},{"node":{"excerpt":"CellLocation  is an interface that describes position inside the grid. Definition Properties Property name Type Property description rowId…","fields":{"slug":"/4.0/7-api/0-interfaces/6-cell-location/"},"frontmatter":{"posttype":"docs","title":"CellLocation","metaDescription":"ReactGrid docs","metaTitle":"CellLocation interface","proMark":null}}},{"node":{"excerpt":"CellTemplates  is an interface describes your custom cell templates as key-value object. \nKey of  CellTemplates  interface have to be equal…","fields":{"slug":"/4.0/7-api/0-interfaces/6a-cell-templates/"},"frontmatter":{"posttype":"docs","title":"CellTemplates","metaDescription":"ReactGrid docs","metaTitle":"CellTemplates interface","proMark":null}}},{"node":{"excerpt":"CellStyle  styles single cell and prevents passing unwanted CSS properties that could break down view rendering.\nThis interface uses also a…","fields":{"slug":"/4.0/7-api/0-interfaces/7-cell-style/"},"frontmatter":{"posttype":"docs","title":"CellStyle","metaDescription":"ReactGrid docs","metaTitle":"CellStyle interface","proMark":null}}},{"node":{"excerpt":"The context menu is part of the grid, each menu option must implement the interface below. Definition Properties Property name Type Property…","fields":{"slug":"/4.0/7-api/0-interfaces/8-menuoption/"},"frontmatter":{"posttype":"docs","title":"MenuOption","metaDescription":"ReactGrid docs","metaTitle":"MenuOption interface","proMark":null}}},{"node":{"excerpt":"Highlight is an element to mark any cell inside the grid with custom border color or CSS class Highlight (opposed to  focus ): it can be…","fields":{"slug":"/4.0/7-api/0-interfaces/9-highlight/"},"frontmatter":{"posttype":"docs","title":"Highlight","metaDescription":"ReactGrid docs","metaTitle":"Highlight interface","proMark":null}}},{"node":{"excerpt":"TextLabels  describes a set of text labels used by ReactGrids internal i18n module. \nEach text label has its own default value. Definition…","fields":{"slug":"/4.0/7-api/0-interfaces/90-textlabels/"},"frontmatter":{"posttype":"docs","title":"TextLabels","metaDescription":"ReactGrid docs","metaTitle":"TextLabels interface","proMark":null}}},{"node":{"excerpt":"ReactGrid API provides following types: Compatible CellChange Uncertain UncertainCompatible Id DropPosition DefaultCellTypes SelectionMode","fields":{"slug":"/4.0/7-api/1-types/"},"frontmatter":{"posttype":"docs","title":"Types","metaDescription":"ReactGrid docs","metaTitle":"Types","proMark":null}}},{"node":{"excerpt":"CompatibleCell  is an extended and exchangeable cell (compatible with different types).  Definition Properties Property name Type Property…","fields":{"slug":"/4.0/7-api/1-types/1-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"Compatible","metaDescription":"ReactGrid docs","metaTitle":"Compatible type","proMark":null}}},{"node":{"excerpt":"CellChange  type is used by  onCellsChanged  callback in  ReactGrid  component. It represents \nmutually exclusive changes to a single cell…","fields":{"slug":"/4.0/7-api/1-types/2-cell-change/"},"frontmatter":{"posttype":"docs","title":"CellChange","metaDescription":"ReactGrid docs","metaTitle":"CellChange type","proMark":null}}},{"node":{"excerpt":"Uncertain  is a cell type that every field of  TCell  is optional. \nCell of this type will have only one essential field provided by  Cell…","fields":{"slug":"/4.0/7-api/1-types/2-uncertain-cell/"},"frontmatter":{"posttype":"docs","title":"Uncertain","metaDescription":"ReactGrid docs","metaTitle":"Uncertain type","proMark":null}}},{"node":{"excerpt":"UncertainCompatible  is a cell type that is compatible with other cell types \nthat can be instances of various cell types (e.g.  DataCell…","fields":{"slug":"/4.0/7-api/1-types/3-uncertain-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"UncertainCompatible","metaDescription":"ReactGrid docs","metaTitle":"UncertainCompatible type","proMark":null}}},{"node":{"excerpt":"Id  is a common type to identify many objects in grid e.g.:  Highlight , CellLocation , CellChange , Column , Row Id  can be a  number  or…","fields":{"slug":"/4.0/7-api/1-types/4-id/"},"frontmatter":{"posttype":"docs","title":"Id","metaDescription":"ReactGrid docs","metaTitle":"Id type","proMark":null}}},{"node":{"excerpt":"Indicates where row/column was dropped. Used by  ReactGridProps  callbacks. Definition","fields":{"slug":"/4.0/7-api/1-types/5-drop-position/"},"frontmatter":{"posttype":"docs","title":"DropPosition","metaDescription":"ReactGrid docs","metaTitle":"DropPosition type","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains a union of basic cells usually used for consuming changes and \nmarking cells array inside the data row. Definition","fields":{"slug":"/4.0/7-api/1-types/6-default-cells/"},"frontmatter":{"posttype":"docs","title":"DefaultCellTypes","metaDescription":"ReactGrid docs","metaTitle":"DefaultCellTypes","proMark":null}}},{"node":{"excerpt":"ReactGrid API contains three types of values which can be used in selection.\nIt is  row ,  column  or  range . It's used for marking currect…","fields":{"slug":"/4.0/7-api/1-types/7-selection-mode/"},"frontmatter":{"posttype":"docs","title":"SelectionMode","metaDescription":"ReactGrid docs","metaTitle":"SelectionMode","proMark":null}}},{"node":{"excerpt":"Keycodes Keycode related functions are commonly used by every cell template and they uses the unicode value of pressed keyboard key\n(exacly…","fields":{"slug":"/4.0/7-api/2-functions/"},"frontmatter":{"posttype":"docs","title":"Functions & Enums","metaDescription":"ReactGrid docs","metaTitle":"Functions & Enums","proMark":null}}},{"node":{"excerpt":"Why don’t you provide a ready to use DataTable component? This is actually a feature! We want to give you the freedom of how you want to…","fields":{"slug":"/4.0/8-FAQ/"},"frontmatter":{"posttype":"docs","title":"FAQ","metaDescription":"ReactGrid docs","metaTitle":"Frequently asked question","proMark":null}}}]}},"pageContext":{"slug":"/3.1/4-cell-templates/4-EmailCell/"}},"staticQueryHashes":["3706406642","459846946","63159454","844302929","957136253"]}